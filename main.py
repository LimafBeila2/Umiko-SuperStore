import json
import os
import logging
from time import sleep
from dotenv import load_dotenv
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
import random
import chromedriver_autoinstaller
from selenium_stealth import stealth

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
headers = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36"
}

# –ü–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ Railway
CHROME_PROFILE_PATH = "/tmp/chrome_profile"
COOKIES_PATH = "/tmp/cookies.json"  # –ü—É—Ç—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—É–∫–∏

def create_driver():
    logging.info("üöÄ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π WebDriver...")

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ ChromeDriver
    chromedriver_autoinstaller.install()
    logging.info("‚úÖ ChromeDriver —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

    options = Options()
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--window-size=1920x1080")
    options.add_argument(f"--user-data-dir={CHROME_PROFILE_PATH}")  # –ü—É—Ç—å –∫ –ø—Ä–æ—Ñ–∏–ª—é
    options.add_argument("--headless")  # –ë–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    options.add_argument("--disable-blink-features=AutomationControlled")
    options.add_argument('--disable-service-worker')
    options.add_argument('--disable-application-cache')
    options.add_argument('--disk-cache-size=1')

    driver = webdriver.Chrome(options=options)
    logging.info("‚úÖ WebDriver —Å–æ–∑–¥–∞–Ω.")
    driver.execute_cdp_cmd("Network.setExtraHTTPHeaders", {"headers": headers})

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—É–∫–∏ –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ—Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    load_cookies(driver)

    sleep(3)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—É–∑—É, —á—Ç–æ–±—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É—Å–ø–µ–ª–∏ –ø—Ä–æ–≥—Ä—É–∑–∏—Ç—å—Å—è

    return driver

def save_cookies(driver):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—É–∫–æ–≤ –≤ —Ñ–∞–π–ª"""
    os.makedirs(os.path.dirname(COOKIES_PATH), exist_ok=True)
    cookies = driver.get_cookies()
    with open(COOKIES_PATH, "w", encoding="utf-8") as f:
        json.dump(cookies, f, indent=4)
    logging.info(f"‚úÖ –ö—É–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {len(cookies)} —à—Ç.")

def load_cookies(driver):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫—É–∫–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
    if os.path.exists(COOKIES_PATH):
        with open(COOKIES_PATH, "r", encoding="utf-8") as f:
            cookies = json.load(f)
        for cookie in cookies:
            driver.add_cookie(cookie)
        logging.info("‚úÖ –ö—É–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
        driver.refresh()
    else:
        logging.warning("‚ùå –§–∞–π–ª —Å –∫—É–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—Ö–æ–¥.")
        login_to_umico(driver)

def check_session(driver):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—Ö–æ–¥–∞, –∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å –∑–∞–∫–∞–∑–∞–º–∏
        WebDriverWait(driver, 10).until(EC.url_contains("/account/orders"))
        logging.info("–°–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞.")
    except Exception as e:
        logging.warning("–°–µ—Å—Å–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥.")
        logging.exception(e)
        login_to_umico(driver)  # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è

def refresh_cookies(driver):
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫—É–∫–∏ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –æ–ø–µ—Ä–∞—Ü–∏–π"""
    driver.delete_all_cookies()
    
    if os.path.exists(COOKIES_PATH):
        with open(COOKIES_PATH, "r", encoding="utf-8") as f:
            cookies = json.load(f)

        for cookie in cookies:
            driver.add_cookie(cookie)

        logging.info("‚úÖ –ö—É–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã, –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞...")
        driver.refresh()

def login_to_umico(driver):
    logging.info("–ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
    load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env

    username = os.getenv("UMICO_USERNAME")
    password = os.getenv("UMICO_PASSWORD")

    if not username or not password:
        logging.error("–û—à–∏–±–∫–∞: –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env")
        raise ValueError("–û—à–∏–±–∫–∞: –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env")

    logging.info("–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Umico...")
    driver.get("https://business.umico.az/sign-in")

    # –û–∂–∏–¥–∞–µ–º, –ø–æ–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞
    login_input = WebDriverWait(driver, 30).until(
        EC.presence_of_element_located((By.XPATH, "//input[@placeholder='ƒ∞stifad…ô√ßi adƒ± daxil edin']"))
    )
    login_input.send_keys(username)  # –í–≤–æ–¥–∏–º –ª–æ–≥–∏–Ω
    logging.info(f"–õ–æ–≥–∏–Ω '{username}' –≤–≤–µ–¥–µ–Ω.")

    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
    password_input = driver.find_element(By.XPATH, "//input[@placeholder='≈ûifr…ôni daxil edin']")
    password_input.send_keys(password)  # –í–≤–æ–¥–∏–º –ø–∞—Ä–æ–ª—å
    password_input.send_keys(Keys.RETURN)  # –ù–∞–∂–∏–º–∞–µ–º Enter
    logging.info("–ü–∞—Ä–æ–ª—å –≤–≤–µ–¥–µ–Ω –∏ —Ñ–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")

    try:
        # –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–∫–∞–∑–æ–≤, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤—Ö–æ–¥ –±—ã–ª —É—Å–ø–µ—à–Ω—ã–º
        WebDriverWait(driver, 30).until(EC.url_contains("/account/orders"))
        sleep(3)  # –ü–∞—É–∑–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        logging.info("–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ Umico Business!")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É–∫–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
        save_cookies(driver)
    except Exception as e:
        logging.error("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞!")
        logging.exception(e)
        driver.quit()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä
        raise ValueError("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞! –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å.")

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

if __name__ == "__main__":
    while True:
        logging.info("–ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤...")
        process_products_from_json("product.json")
        logging.info("–†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥...")
        sleep(60)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –∑–∞–ø—É—Å–∫–æ–º
